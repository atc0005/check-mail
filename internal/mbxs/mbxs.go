// Copyright 2020 Adam Chalkley
//
// https://github.com/atc0005/check-mail
//
// Licensed under the MIT License. See LICENSE file in the project root for
// full license information.

package mbxs

import (
	"fmt"
	"time"
)

// A baseline starting point for allocating slices to match "about" how many
// mailboxes will need to be checked on a remote mail server.
const mailboxCountGuesstimate int = 5

// Message is a subset of attributes for an email message found within a
// specified mailbox.
type Message struct {

	// MessageID is the unique ID for an email message found within a
	// specified mailbox.
	MessageID string

	// EnvelopeDate is the crafted date value for an email message found
	// within a specific mailbox. This is the date set by the mail transport
	// software that initially received the email message from the mail
	// client. While this can be incorrect or forged, it is generally more
	// reliable than the date email header value.
	EnvelopeDate time.Time

	// EnvelopeDateFormatted is a date/time value stored as a string for later
	// use with templates.
	EnvelopeDateFormatted string

	// ReceivedDate is the date when the email message was received by the
	// hosting mail server. This value is separate from EnvelopeDate (which is
	// set by the first SMTP server used by the sending mail client) and the
	// date header generated by the sending client's mail software.
	//
	// NOTE: In testing, this gave a wildly incorrect value. Example:
	//
	// EnvelopeDate: 2017-05-12 17:40:58 +0000 +0000
	// EnvelopeLocalDate: 2017-05-12 12:40:58 -0500 CDT
	// ReceivedDate: 0001-01-01 00:00:00 +0000 UTC
	// ReceivedLocalDate: 0000-12-31 18:09:24 -0550 LMT
	//
	// ReceivedDate time.Time

	// OriginalSubject is the unmodified, original subject line of an email
	// message found within a specificed mailbox.
	OriginalSubject string

	// ModifiedSubject is the subject line of the original email message that
	// has been modified to remove characters incompatible with the a target
	// character set (e.g., MySQL's utf8mb3).
	ModifiedSubject string
}

// MailboxCheckResult records mail items found for a specific mailbox.
type MailboxCheckResult struct {
	MailboxName string
	ItemsFound  int
	Messages    []Message
}

// MailboxCheckResults represents a collection of all results from mailbox
// checks.
type MailboxCheckResults []MailboxCheckResult

// GotMail returns true if mail was found in checked mailboxes or false if not.
func (mcr MailboxCheckResults) GotMail() bool {
	for _, result := range mcr {
		if result.ItemsFound > 0 {
			return true
		}
	}
	return false
}

// TotalMessagesFound returns a count of all messages found across all checked
// mailboxes.
func (mcr MailboxCheckResults) TotalMessagesFound() int {
	var total int
	for _, result := range mcr {
		total += result.ItemsFound
	}
	return total
}

// MessagesFoundSummary returns a one-line summary of the mail items found in
// checked mailboxes.
func (mcr MailboxCheckResults) MessagesFoundSummary() string {
	var summary string
	for index, result := range mcr {
		summary += fmt.Sprintf("%s(%d)", result.MailboxName, result.ItemsFound)
		if index < (len(mcr) - 1) {
			// Append separator chars if not processing the last index item
			summary += ", "
		}
	}
	return summary
}
